name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  release-windows:
    runs-on: windows-latest
    # Add required permissions for creating releases
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update VERSION.json
        run: |
          $version = "${{ github.event.inputs.version }}"
          # Remove 'v' prefix if present
          $cleanVersion = $version -replace '^v', ''
          
          # Create version object
          $versionObj = @{
            version = $cleanVersion
          }
          
          # Convert to JSON and write to file
          $versionObj | ConvertTo-Json | Set-Content -Path "VERSION.json"
          
          Write-Host "Updated VERSION.json with version: $cleanVersion"
          Get-Content "VERSION.json"
        shell: powershell

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Wails
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Install frontend dependencies
        run: npm ci
        working-directory: frontend

      - name: Build frontend
        run: npm run build
        working-directory: frontend

      - name: Build application with version
        run: |
          $version = "${{ github.event.inputs.version }}"
          $commit = git rev-parse --short HEAD
          $buildDate = (Get-Date).ToString("yyyy-MM-ddTHH:mm:ssZ")
          
          Write-Host "Building with version: $version"
          Write-Host "Build commit: $commit"
          Write-Host "Build date: $buildDate"
          
          wails build -platform windows/amd64 -ldflags "-X autoclipsend/version.Version=$version -X autoclipsend/version.Commit=$commit -X autoclipsend/version.Date=$buildDate"
        shell: powershell

      - name: Verify build
        run: |
          if (Test-Path "build\bin\autoclipsend.exe") {
            Write-Host "✅ Build successful - binary created"
            Get-Item "build\bin\autoclipsend.exe" | Format-List
          } else {
            Write-Host "❌ Build failed - binary not found"
            exit 1
          }
        shell: powershell

      - name: Create release and upload assets
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create ${{ github.event.inputs.version }} build/bin/autoclipsend.exe --title "AutoClipSend ${{ github.event.inputs.version }}"   
             
      - name: Commit updated VERSION.json
        run: |
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add VERSION.json
            git commit -m "Update VERSION.json to ${{ github.event.inputs.version }}" || exit 0
            git push
        shell: cmd